/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common.js";
import type {
  Structs,
  StructsInterface,
} from "../../MultiTokenNtt.sol/Structs.js";

const _abi = [
  {
    type: "function",
    name: "encodeNativeTokenTransfer",
    inputs: [
      {
        name: "m",
        type: "tuple",
        internalType: "struct Structs.NativeTokenTransfer",
        components: [
          {
            name: "amount",
            type: "uint72",
            internalType: "TrimmedAmount",
          },
          {
            name: "token",
            type: "tuple",
            internalType: "struct TokenInfo",
            components: [
              {
                name: "meta",
                type: "tuple",
                internalType: "struct TokenMeta",
                components: [
                  {
                    name: "name",
                    type: "bytes32",
                    internalType: "bytes32",
                  },
                  {
                    name: "symbol",
                    type: "bytes32",
                    internalType: "bytes32",
                  },
                  {
                    name: "decimals",
                    type: "uint8",
                    internalType: "uint8",
                  },
                ],
              },
              {
                name: "token",
                type: "tuple",
                internalType: "struct TokenId",
                components: [
                  {
                    name: "chainId",
                    type: "uint16",
                    internalType: "uint16",
                  },
                  {
                    name: "tokenAddress",
                    type: "bytes32",
                    internalType: "bytes32",
                  },
                ],
              },
            ],
          },
          {
            name: "sender",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "to",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "encoded",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "parseNativeTokenTransfer",
    inputs: [
      {
        name: "encoded",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "m",
        type: "tuple",
        internalType: "struct Structs.NativeTokenTransfer",
        components: [
          {
            name: "amount",
            type: "uint72",
            internalType: "TrimmedAmount",
          },
          {
            name: "token",
            type: "tuple",
            internalType: "struct TokenInfo",
            components: [
              {
                name: "meta",
                type: "tuple",
                internalType: "struct TokenMeta",
                components: [
                  {
                    name: "name",
                    type: "bytes32",
                    internalType: "bytes32",
                  },
                  {
                    name: "symbol",
                    type: "bytes32",
                    internalType: "bytes32",
                  },
                  {
                    name: "decimals",
                    type: "uint8",
                    internalType: "uint8",
                  },
                ],
              },
              {
                name: "token",
                type: "tuple",
                internalType: "struct TokenId",
                components: [
                  {
                    name: "chainId",
                    type: "uint16",
                    internalType: "uint16",
                  },
                  {
                    name: "tokenAddress",
                    type: "bytes32",
                    internalType: "bytes32",
                  },
                ],
              },
            ],
          },
          {
            name: "sender",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "to",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "error",
    name: "IncorrectPrefix",
    inputs: [
      {
        name: "prefix",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
  },
  {
    type: "error",
    name: "LengthMismatch",
    inputs: [
      {
        name: "encodedLength",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "expectedLength",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
] as const;

const _bytecode =
  "0x6108aa61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630c11d83114610045578063a733bdaa1461006e575b600080fd5b610058610053366004610552565b6100eb565b604051610065919061067c565b60405180910390f35b61008161007c3660046106d7565b6101c1565b60408051825168ffffffffffffffffff1681526020808401518051805183850152808301518486015284015160ff1660608085019190915290820151805161ffff1660808501529091015160a08301529183015160c082015291015160e082015261010001610065565b8051606090632653951560e21b60ff8216600883901c67ffffffffffffffff16602086015160405163dcb9bd4f60e01b815273__$4033db715c90f2390978d4fb71beaa4caa$__9163dcb9bd4f916101469190600401610757565b600060405180830381865af4158015610163573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261018b9190810190610796565b866040015187606001516040516020016101aa9695949392919061080d565b604051602081830303815290604052915050919050565b6101c9610429565b6000806101d68482610296565b925090506001600160e01b03198116632653951560e21b1461021c576040516356d2569d60e01b81526001600160e01b0319821660048201526024015b60405180910390fd5b818401600181015160099182015191909301929061023a81836102c1565b68ffffffffffffffffff16855261025186856102dd565b602087019190915293506102658685610345565b604087019190915293506102798685610345565b6060870191909152935061028d868561036b565b50505050919050565b6000806000806102af8686600491810182015192910190565b60e09190911b97909650945050505050565b68ffffffffffffffff00600883901b1660ff8216175b92915050565b6040805160a0810182526000818301818152606083018290526080830182905282528251808401909352808352602080840182905282019290925290610323848461039d565b908352925061033284846103f7565b6020840191909152919491935090915050565b60008060008061035e8686602091810182015192910190565b9097909650945050505050565b808251146103995781516040516355c5b3e360e11b8152600481019190915260248101829052604401610213565b5050565b60408051606081018252600080825260208201819052918101829052906103c48484610345565b90835292506103d38484610345565b6020840191909152600194810185015160ff16604084015291949390910192915050565b60408051808201909152600080825260208201819052600284840181015161ffff168352909201916103328484610345565b6040518060800160405280600068ffffffffffffffffff1681526020016104886040805160a081018252600081830181815260608301829052608083018290528252825180840190935280835260208381019190915290919082015290565b815260006020820181905260409091015290565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156104d5576104d561049c565b60405290565b6040805190810167ffffffffffffffff811182821017156104d5576104d561049c565b6040516060810167ffffffffffffffff811182821017156104d5576104d561049c565b604051601f8201601f1916810167ffffffffffffffff8111828210171561054a5761054a61049c565b604052919050565b600081830361010081121561056657600080fd5b61056e6104b2565b833568ffffffffffffffffff8116811461058757600080fd5b8152601f19820160a081121561059c57600080fd5b6105a46104db565b60608212156105b257600080fd5b6105ba6104fe565b91506020860135825260408601356020830152606086013560ff811681146105e157600080fd5b806040840152508181526040607f19850112156105fd57600080fd5b6106056104db565b93506080860135915061ffff8216821461061e57600080fd5b81845260a08601356020850152836020820152806020840152505060c0840135604082015260e08401356060820152809250505092915050565b60005b8381101561067357818101518382015260200161065b565b50506000910152565b602081526000825180602084015261069b816040850160208701610658565b601f01601f19169190910160400192915050565b600067ffffffffffffffff8211156106c9576106c961049c565b50601f01601f191660200190565b6000602082840312156106e957600080fd5b813567ffffffffffffffff81111561070057600080fd5b8201601f8101841361071157600080fd5b803561072461071f826106af565b610521565b81815285602083850101111561073957600080fd5b81602084016020830137600091810160200191909152949350505050565b8151805182526020808201518184015260409182015160ff169183019190915280830151805161ffff1660608401520151608082015260a081016102d7565b6000602082840312156107a857600080fd5b815167ffffffffffffffff8111156107bf57600080fd5b8201601f810184136107d057600080fd5b80516107de61071f826106af565b8181528560208385010111156107f357600080fd5b610804826020830160208601610658565b95945050505050565b6001600160e01b03198716815260f886901b6001600160f81b031916600482015260c085901b6001600160c01b0319166005820152835160009061085881600d850160208901610658565b909101600d81019390935250602d820152604d0194935050505056fea26469706673582212201c155c65f772a12c9307a62bd290da0f4b35be665316bcf2e8a44ff130dd858364736f6c63430008130033";

type StructsConstructorParams =
  | [linkLibraryAddresses: StructsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StructsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Structs__factory extends ContractFactory {
  constructor(...args: StructsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Structs__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: StructsLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$4033db715c90f2390978d4fb71beaa4caa\\$__", "g"),
      linkLibraryAddresses["src/libraries/TokenInfo.sol:TokenInfoLib"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Structs & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Structs__factory {
    return super.connect(runner) as Structs__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StructsInterface {
    return new Interface(_abi) as StructsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Structs {
    return new Contract(address, _abi, runner) as unknown as Structs;
  }
}

export interface StructsLibraryAddresses {
  ["src/libraries/TokenInfo.sol:TokenInfoLib"]: string;
}
