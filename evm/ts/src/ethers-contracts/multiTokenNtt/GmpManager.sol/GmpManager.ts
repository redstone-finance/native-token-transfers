/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export declare namespace TransceiverStructs {
  export type NttManagerMessageStruct = {
    id: BytesLike;
    sender: BytesLike;
    payload: BytesLike;
  };

  export type NttManagerMessageStructOutput = [
    id: string,
    sender: string,
    payload: string
  ] & { id: string; sender: string; payload: string };
}

export declare namespace GmpManager {
  export type GmpPeerStruct = { peerAddress: BytesLike };

  export type GmpPeerStructOutput = [peerAddress: string] & {
    peerAddress: string;
  };
}

export declare namespace TransceiverRegistry {
  export type TransceiverInfoStruct = {
    registered: boolean;
    enabled: boolean;
    index: BigNumberish;
  };

  export type TransceiverInfoStructOutput = [
    registered: boolean,
    enabled: boolean,
    index: bigint
  ] & { registered: boolean; enabled: boolean; index: bigint };
}

export interface GmpManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GMP_MANAGER_VERSION"
      | "attestationReceived"
      | "chainId"
      | "executeMsg"
      | "getMigratesImmutables"
      | "getPeer"
      | "getThreshold"
      | "getTransceiverInfo"
      | "getTransceivers"
      | "initialize"
      | "isMessageApproved"
      | "isMessageExecuted"
      | "isPaused"
      | "messageAttestations"
      | "migrate"
      | "nextMessageSequence"
      | "owner"
      | "pause"
      | "pauser"
      | "quoteDeliveryPrice"
      | "removeTransceiver"
      | "sendMessage"
      | "setPeer"
      | "setThreshold"
      | "setTransceiver"
      | "token"
      | "transceiverAttestedToMessage"
      | "transferOwnership"
      | "transferPauserCapability"
      | "unpause"
      | "upgrade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "MessageAlreadyExecuted"
      | "MessageAttestedTo"
      | "MessageExecuted"
      | "MessageSent"
      | "NotPaused"
      | "OwnershipTransferred"
      | "Paused"
      | "PauserTransferred"
      | "PeerUpdated"
      | "ThresholdChanged"
      | "TransceiverAdded"
      | "TransceiverRemoved"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GMP_MANAGER_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attestationReceived",
    values: [
      BigNumberish,
      BytesLike,
      TransceiverStructs.NttManagerMessageStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeMsg",
    values: [
      BigNumberish,
      BytesLike,
      TransceiverStructs.NttManagerMessageStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigratesImmutables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransceiverInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransceivers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageApproved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messageAttestations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextMessageSequence",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTransceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transceiverAttestedToMessage",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPauserCapability",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GMP_MANAGER_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestationReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeMsg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMigratesImmutables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransceiverInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMessageApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextMessageSequence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTransceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transceiverAttestedToMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPauserCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAlreadyExecutedEvent {
  export type InputTuple = [sourceNttManager: BytesLike, msgHash: BytesLike];
  export type OutputTuple = [sourceNttManager: string, msgHash: string];
  export interface OutputObject {
    sourceNttManager: string;
    msgHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAttestedToEvent {
  export type InputTuple = [
    digest: BytesLike,
    transceiver: AddressLike,
    index: BigNumberish
  ];
  export type OutputTuple = [
    digest: string,
    transceiver: string,
    index: bigint
  ];
  export interface OutputObject {
    digest: string;
    transceiver: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageExecutedEvent {
  export type InputTuple = [
    messageHash: BytesLike,
    sourceChain: BigNumberish,
    sender: AddressLike,
    callee: AddressLike,
    data: BytesLike
  ];
  export type OutputTuple = [
    messageHash: string,
    sourceChain: bigint,
    sender: string,
    callee: string,
    data: string
  ];
  export interface OutputObject {
    messageHash: string;
    sourceChain: bigint;
    sender: string;
    callee: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    sender: AddressLike,
    targetChain: BigNumberish,
    callee: BytesLike,
    data: BytesLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    sequence: bigint,
    sender: string,
    targetChain: bigint,
    callee: string,
    data: string,
    fee: bigint
  ];
  export interface OutputObject {
    sequence: bigint;
    sender: string;
    targetChain: bigint;
    callee: string;
    data: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotPausedEvent {
  export type InputTuple = [notPaused: boolean];
  export type OutputTuple = [notPaused: boolean];
  export interface OutputObject {
    notPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserTransferredEvent {
  export type InputTuple = [oldPauser: AddressLike, newPauser: AddressLike];
  export type OutputTuple = [oldPauser: string, newPauser: string];
  export interface OutputObject {
    oldPauser: string;
    newPauser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerUpdatedEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    oldPeerAddress: BytesLike,
    newPeerAddress: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    oldPeerAddress: string,
    newPeerAddress: string
  ];
  export interface OutputObject {
    chainId: bigint;
    oldPeerAddress: string;
    newPeerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdChangedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, threshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransceiverAddedEvent {
  export type InputTuple = [
    transceiver: AddressLike,
    transceiversNum: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [
    transceiver: string,
    transceiversNum: bigint,
    threshold: bigint
  ];
  export interface OutputObject {
    transceiver: string;
    transceiversNum: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransceiverRemovedEvent {
  export type InputTuple = [transceiver: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [transceiver: string, threshold: bigint];
  export interface OutputObject {
    transceiver: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GmpManager extends BaseContract {
  connect(runner?: ContractRunner | null): GmpManager;
  waitForDeployment(): Promise<this>;

  interface: GmpManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GMP_MANAGER_VERSION: TypedContractMethod<[], [string], "view">;

  attestationReceived: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceNttManagerAddress: BytesLike,
      payload: TransceiverStructs.NttManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;

  chainId: TypedContractMethod<[], [bigint], "view">;

  executeMsg: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceGmpManagerAddress: BytesLike,
      message: TransceiverStructs.NttManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;

  getMigratesImmutables: TypedContractMethod<[], [boolean], "view">;

  getPeer: TypedContractMethod<
    [chainId_: BigNumberish],
    [GmpManager.GmpPeerStructOutput],
    "view"
  >;

  getThreshold: TypedContractMethod<[], [bigint], "view">;

  getTransceiverInfo: TypedContractMethod<
    [],
    [TransceiverRegistry.TransceiverInfoStructOutput[]],
    "view"
  >;

  getTransceivers: TypedContractMethod<[], [string[]], "view">;

  initialize: TypedContractMethod<[], [void], "payable">;

  isMessageApproved: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    "view"
  >;

  isMessageExecuted: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    "view"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  messageAttestations: TypedContractMethod<
    [digest: BytesLike],
    [bigint],
    "view"
  >;

  migrate: TypedContractMethod<[], [void], "nonpayable">;

  nextMessageSequence: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  pauser: TypedContractMethod<[], [string], "view">;

  quoteDeliveryPrice: TypedContractMethod<
    [recipientChain: BigNumberish, transceiverInstructions: BytesLike],
    [[bigint[], bigint]],
    "view"
  >;

  removeTransceiver: TypedContractMethod<
    [transceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [
      targetChain: BigNumberish,
      callee: BytesLike,
      refundAddress: BytesLike,
      data: BytesLike,
      transceiverInstructions: BytesLike
    ],
    [bigint],
    "payable"
  >;

  setPeer: TypedContractMethod<
    [peerChainId: BigNumberish, peerAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  setThreshold: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransceiver: TypedContractMethod<
    [transceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transceiverAttestedToMessage: TypedContractMethod<
    [digest: BytesLike, index: BigNumberish],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPauserCapability: TypedContractMethod<
    [newPauser: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GMP_MANAGER_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "attestationReceived"
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceNttManagerAddress: BytesLike,
      payload: TransceiverStructs.NttManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeMsg"
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceGmpManagerAddress: BytesLike,
      message: TransceiverStructs.NttManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMigratesImmutables"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getPeer"
  ): TypedContractMethod<
    [chainId_: BigNumberish],
    [GmpManager.GmpPeerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransceiverInfo"
  ): TypedContractMethod<
    [],
    [TransceiverRegistry.TransceiverInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransceivers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "isMessageApproved"
  ): TypedContractMethod<[digest: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMessageExecuted"
  ): TypedContractMethod<[digest: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "messageAttestations"
  ): TypedContractMethod<[digest: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextMessageSequence"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteDeliveryPrice"
  ): TypedContractMethod<
    [recipientChain: BigNumberish, transceiverInstructions: BytesLike],
    [[bigint[], bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeTransceiver"
  ): TypedContractMethod<[transceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      callee: BytesLike,
      refundAddress: BytesLike,
      data: BytesLike,
      transceiverInstructions: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [peerChainId: BigNumberish, peerAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThreshold"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransceiver"
  ): TypedContractMethod<[transceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transceiverAttestedToMessage"
  ): TypedContractMethod<
    [digest: BytesLike, index: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPauserCapability"
  ): TypedContractMethod<[newPauser: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAlreadyExecuted"
  ): TypedContractEvent<
    MessageAlreadyExecutedEvent.InputTuple,
    MessageAlreadyExecutedEvent.OutputTuple,
    MessageAlreadyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAttestedTo"
  ): TypedContractEvent<
    MessageAttestedToEvent.InputTuple,
    MessageAttestedToEvent.OutputTuple,
    MessageAttestedToEvent.OutputObject
  >;
  getEvent(
    key: "MessageExecuted"
  ): TypedContractEvent<
    MessageExecutedEvent.InputTuple,
    MessageExecutedEvent.OutputTuple,
    MessageExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "NotPaused"
  ): TypedContractEvent<
    NotPausedEvent.InputTuple,
    NotPausedEvent.OutputTuple,
    NotPausedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PauserTransferred"
  ): TypedContractEvent<
    PauserTransferredEvent.InputTuple,
    PauserTransferredEvent.OutputTuple,
    PauserTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PeerUpdated"
  ): TypedContractEvent<
    PeerUpdatedEvent.InputTuple,
    PeerUpdatedEvent.OutputTuple,
    PeerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdChanged"
  ): TypedContractEvent<
    ThresholdChangedEvent.InputTuple,
    ThresholdChangedEvent.OutputTuple,
    ThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransceiverAdded"
  ): TypedContractEvent<
    TransceiverAddedEvent.InputTuple,
    TransceiverAddedEvent.OutputTuple,
    TransceiverAddedEvent.OutputObject
  >;
  getEvent(
    key: "TransceiverRemoved"
  ): TypedContractEvent<
    TransceiverRemovedEvent.InputTuple,
    TransceiverRemovedEvent.OutputTuple,
    TransceiverRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MessageAlreadyExecuted(bytes32,bytes32)": TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;
    MessageAlreadyExecuted: TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;

    "MessageAttestedTo(bytes32,address,uint8)": TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;
    MessageAttestedTo: TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;

    "MessageExecuted(bytes32,uint16,address,address,bytes)": TypedContractEvent<
      MessageExecutedEvent.InputTuple,
      MessageExecutedEvent.OutputTuple,
      MessageExecutedEvent.OutputObject
    >;
    MessageExecuted: TypedContractEvent<
      MessageExecutedEvent.InputTuple,
      MessageExecutedEvent.OutputTuple,
      MessageExecutedEvent.OutputObject
    >;

    "MessageSent(uint64,address,uint16,bytes32,bytes,uint256)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "NotPaused(bool)": TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;
    NotPaused: TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PauserTransferred(address,address)": TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;
    PauserTransferred: TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;

    "PeerUpdated(uint16,bytes32,bytes32)": TypedContractEvent<
      PeerUpdatedEvent.InputTuple,
      PeerUpdatedEvent.OutputTuple,
      PeerUpdatedEvent.OutputObject
    >;
    PeerUpdated: TypedContractEvent<
      PeerUpdatedEvent.InputTuple,
      PeerUpdatedEvent.OutputTuple,
      PeerUpdatedEvent.OutputObject
    >;

    "ThresholdChanged(uint8,uint8)": TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;
    ThresholdChanged: TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;

    "TransceiverAdded(address,uint256,uint8)": TypedContractEvent<
      TransceiverAddedEvent.InputTuple,
      TransceiverAddedEvent.OutputTuple,
      TransceiverAddedEvent.OutputObject
    >;
    TransceiverAdded: TypedContractEvent<
      TransceiverAddedEvent.InputTuple,
      TransceiverAddedEvent.OutputTuple,
      TransceiverAddedEvent.OutputObject
    >;

    "TransceiverRemoved(address,uint8)": TypedContractEvent<
      TransceiverRemovedEvent.InputTuple,
      TransceiverRemovedEvent.OutputTuple,
      TransceiverRemovedEvent.OutputObject
    >;
    TransceiverRemoved: TypedContractEvent<
      TransceiverRemovedEvent.InputTuple,
      TransceiverRemovedEvent.OutputTuple,
      TransceiverRemovedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
