/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export type TokenMetaStruct = {
  name: BytesLike;
  symbol: BytesLike;
  decimals: BigNumberish;
};

export type TokenMetaStructOutput = [
  name: string,
  symbol: string,
  decimals: bigint
] & { name: string; symbol: string; decimals: bigint };

export type TokenIdStruct = { chainId: BigNumberish; tokenAddress: BytesLike };

export type TokenIdStructOutput = [chainId: bigint, tokenAddress: string] & {
  chainId: bigint;
  tokenAddress: string;
};

export type TokenInfoStruct = { meta: TokenMetaStruct; token: TokenIdStruct };

export type TokenInfoStructOutput = [
  meta: TokenMetaStructOutput,
  token: TokenIdStructOutput
] & { meta: TokenMetaStructOutput; token: TokenIdStructOutput };

export declare namespace Structs {
  export type NativeTokenTransferStruct = {
    amount: BigNumberish;
    token: TokenInfoStruct;
    sender: BytesLike;
    to: BytesLike;
  };

  export type NativeTokenTransferStructOutput = [
    amount: bigint,
    token: TokenInfoStructOutput,
    sender: string,
    to: string
  ] & {
    amount: bigint;
    token: TokenInfoStructOutput;
    sender: string;
    to: string;
  };
}

export interface StructsInterface extends Interface {
  getFunction(
    nameOrSignature: "encodeNativeTokenTransfer" | "parseNativeTokenTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "encodeNativeTokenTransfer",
    values: [Structs.NativeTokenTransferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseNativeTokenTransfer",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "encodeNativeTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseNativeTokenTransfer",
    data: BytesLike
  ): Result;
}

export interface Structs extends BaseContract {
  connect(runner?: ContractRunner | null): Structs;
  waitForDeployment(): Promise<this>;

  interface: StructsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  encodeNativeTokenTransfer: TypedContractMethod<
    [m: Structs.NativeTokenTransferStruct],
    [string],
    "view"
  >;

  parseNativeTokenTransfer: TypedContractMethod<
    [encoded: BytesLike],
    [Structs.NativeTokenTransferStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "encodeNativeTokenTransfer"
  ): TypedContractMethod<
    [m: Structs.NativeTokenTransferStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseNativeTokenTransfer"
  ): TypedContractMethod<
    [encoded: BytesLike],
    [Structs.NativeTokenTransferStructOutput],
    "view"
  >;

  filters: {};
}
