/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { Peers, PeersInterface } from "../../MultiTokenNtt.sol/Peers.js";

const _abi = [
  {
    type: "function",
    name: "getPeer",
    inputs: [
      {
        name: "chainId_",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Peers.Peer",
        components: [
          {
            name: "peerAddress",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "PeerUpdated",
    inputs: [
      {
        name: "chainId",
        type: "uint16",
        indexed: false,
        internalType: "uint16",
      },
      {
        name: "oldPeerAddress",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "newPeerAddress",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidPeer",
    inputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "peerAddress",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidPeerChainIdZero",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPeerZeroAddress",
    inputs: [],
  },
] as const;

export class Peers__factory {
  static readonly abi = _abi;
  static createInterface(): PeersInterface {
    return new Interface(_abi) as PeersInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Peers {
    return new Contract(address, _abi, runner) as unknown as Peers;
  }
}
